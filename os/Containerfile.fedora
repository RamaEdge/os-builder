# Multi-stage build for MicroShift edge OS
ARG MICROSHIFT_VERSION=main
ARG MICROSHIFT_REPO=https://github.com/openshift/microshift.git

# Stage 1: Build MicroShift binary
FROM golang:1.23 AS microshift-builder
RUN apt-get update && apt-get install -y --no-install-recommends git make gcc libc6-dev && rm -rf /var/lib/apt/lists/*
WORKDIR /build

ARG MICROSHIFT_VERSION
ARG MICROSHIFT_REPO
RUN git clone --depth 1 --branch ${MICROSHIFT_VERSION} ${MICROSHIFT_REPO} . && \
    make build && \
    cp _output/bin/microshift ./microshift && \
    # Extract container images from MicroShift repository
    RELEASE_FILE=$(find . -name "release-$(uname -m).json" -o -name "release-*.json" | head -1) && \
    if [ -n "$RELEASE_FILE" ]; then \
        cp "$RELEASE_FILE" ./release-images.json; \
    else \
        echo '{"images":[]}' > ./release-images.json; \
    fi

# Stage 2: Final bootc image
FROM quay.io/fedora/fedora-bootc:42

ARG MICROSHIFT_VERSION=main
ARG MICROSHIFT_REPO=https://github.com/openshift/microshift.git

LABEL org.opencontainers.image.title="Edge OS - Fedora bootc" \
      org.opencontainers.image.description="Fedora bootc with MicroShift for edge computing" \
      containers.bootc=1 \
      microshift.version="${MICROSHIFT_VERSION}"

# Install packages and copy MicroShift
COPY --from=microshift-builder /build/microshift /usr/bin/microshift
COPY --from=microshift-builder /build/release-images.json /usr/share/microshift/release-images.json
RUN chmod +x /usr/bin/microshift

# Install essential packages, configure security, and setup container images
RUN dnf install -y openssh-server sudo podman cri-o kubernetes-client NetworkManager \
        firewalld policycoreutils-python-utils systemd-resolved chrony curl jq && \
    # Security hardening
    find /usr -type f \( -perm -4000 -o -perm -2000 \) -name chfn -o -name chsh -o -name newgrp -exec chmod u-s {} \; && \
    # Pre-load MicroShift container images
    mkdir -p /usr/share/microshift /usr/share/containers/storage && \
    if [ -f "/usr/share/microshift/release-images.json" ] && [ -s "/usr/share/microshift/release-images.json" ]; then \
        jq -r '.images[]?' /usr/share/microshift/release-images.json | while read -r image; do \
            podman pull --root /usr/share/containers/storage "$image" 2>/dev/null || true; \
        done; \
    fi && \
    # Configure offline container storage
    mkdir -p /etc/containers/storage.conf.d && \
    echo -e '[storage]\nadditionalImageStores = ["/usr/share/containers/storage"]' > /etc/containers/storage.conf.d/offline.conf && \
    # Install OpenTelemetry Collector
    ARCH=$(uname -m | sed 's/x86_64/amd64/;s/aarch64/arm64/') && \
    curl -sL "https://github.com/open-telemetry/opentelemetry-collector-releases/releases/download/v0.115.0/otelcol_linux_${ARCH}.tar.gz" | \
    tar -xz -C /usr/local/bin/ otelcol 2>/dev/null || echo "OpenTelemetry install skipped" && \
    chmod +x /usr/local/bin/otelcol 2>/dev/null || true && \
    # Cleanup
    dnf remove -y jq && dnf clean all && \
    rm -rf /var/cache/dnf/* /tmp/* /var/tmp/* /usr/share/doc/* /usr/share/man/* /var/lib/dnf/history/*

# Configure services and directories
RUN mkdir -p /etc/containers/systemd /etc/microshift /etc/otelcol /etc/microshift/manifests \
        /var/lib/microshift /var/log/microshift /var/hpvolumes && \
    # Enable services
    systemctl enable sshd chronyd systemd-resolved podman.socket crio microshift && \
    systemctl enable bootc-fetch-apply-updates.timer && \
    # Configure firewall
    firewall-offline-cmd --add-service=ssh --add-port=6443/tcp --add-port=8080/tcp \
        --add-port=10250/tcp --add-port=4317/tcp --add-port=4318/tcp

# Copy configuration files
COPY configs/containers/ /etc/containers/
COPY configs/microshift/ /etc/microshift/
COPY configs/otelcol/ /etc/otelcol/
COPY manifests/ /etc/microshift/manifests/
COPY scripts/ /usr/local/bin/
COPY systemd/ /usr/lib/systemd/system/
COPY kickstart*.ks /

# Set permissions and enable custom services
RUN chmod +x /usr/local/bin/*.sh 2>/dev/null || true && \
    systemctl enable edge-setup.service microshift-kubeconfig-setup.service \
        observability-deploy.service 2>/dev/null || true && \
    restorecon -R /etc /usr/local/bin 2>/dev/null || true && \
    # Create non-root user for container security compliance
    useradd -r -s /sbin/nologin -d /var/empty -c "Container user" containeruser && \
    bootc container lint

# Switch to non-root user for container security compliance
# Note: This is for container image security; bootc will use system users when booted
USER containeruser

CMD ["/bin/bash"] 