#!/bin/bash
set -e

# Create Custom ISO Configuration Script
# This script helps users create their own custom bootc ISO configuration

echo "üöÄ Fedora bootc ISO Configuration Creator"
echo "========================================="
echo ""

# Default values
CONFIG_FILE="custom-config.toml"
DEFAULT_USERNAME="admin"
DEFAULT_HOSTNAME="fedora-edge"

# Functions
prompt_with_default() {
    local prompt="$1"
    local default="$2"
    read -p "$prompt [$default]: " value
    echo "${value:-$default}"
}

prompt_password() {
    local prompt="$1"
    echo -n "$prompt: "
    read -s password
    echo ""
    echo "$password"
}

validate_ssh_key() {
    local key="$1"
    if [[ "$key" =~ ^ssh-(rsa|ed25519|ecdsa) ]]; then
        return 0
    else
        return 1
    fi
}

generate_config() {
    cat > "$CONFIG_FILE" << EOF
# Custom Bootc Image Builder Configuration
# Generated by create-custom-iso.sh on $(date)

# User configuration
[[customizations.user]]
name = "$USERNAME"
password = "$PASSWORD"
groups = ["wheel", "sudo"]
EOF

    if [ -n "$SSH_KEY" ]; then
        echo "key = \"$SSH_KEY\"" >> "$CONFIG_FILE"
    fi

    cat >> "$CONFIG_FILE" << EOF

# Hostname configuration
[customizations.hostname]
hostname = "$HOSTNAME"

# DNS configuration
[customizations.dns]
nameservers = [$(printf '"%s", ' ${DNS_SERVERS[@]} | sed 's/, $//')"]
EOF

    if [ ${#SEARCH_DOMAINS[@]} -gt 0 ]; then
        echo "search_domains = [$(printf '"%s", ' ${SEARCH_DOMAINS[@]} | sed 's/, $//')"]" >> "$CONFIG_FILE"
    fi

    echo "" >> "$CONFIG_FILE"
    echo "# Additional customizations can be added here" >> "$CONFIG_FILE"
    echo "# See config-examples/ for more options" >> "$CONFIG_FILE"
}

# Main script
echo "This script will help you create a custom ISO configuration."
echo "Press Ctrl+C at any time to cancel."
echo ""

# Get user information
echo "üë§ User Account Configuration"
echo "-----------------------------"
USERNAME=$(prompt_with_default "Username" "$DEFAULT_USERNAME")
PASSWORD=$(prompt_password "Password")

echo ""
echo "üîë SSH Key (optional but recommended)"
echo "-------------------------------------"
echo "Enter your SSH public key for secure access (or press Enter to skip):"
read -p "SSH Key: " SSH_KEY

if [ -n "$SSH_KEY" ] && ! validate_ssh_key "$SSH_KEY"; then
    echo "‚ö†Ô∏è  Warning: SSH key format looks invalid. Please check it starts with ssh-rsa, ssh-ed25519, or ssh-ecdsa"
fi

echo ""
echo "üñ•Ô∏è  System Configuration"
echo "------------------------"
HOSTNAME=$(prompt_with_default "Hostname" "$DEFAULT_HOSTNAME")

echo ""
echo "üåê DNS Configuration"
echo "--------------------"
echo "Enter DNS servers (space-separated):"
read -p "DNS Servers [8.8.8.8 1.1.1.1]: " dns_input
if [ -z "$dns_input" ]; then
    DNS_SERVERS=("8.8.8.8" "1.1.1.1")
else
    IFS=' ' read -ra DNS_SERVERS <<< "$dns_input"
fi

echo "Enter DNS search domains (space-separated, optional):"
read -p "Search Domains: " search_input
if [ -n "$search_input" ]; then
    IFS=' ' read -ra SEARCH_DOMAINS <<< "$search_input"
else
    SEARCH_DOMAINS=()
fi

echo ""
echo "üìù Configuration Summary"
echo "------------------------"
echo "Username: $USERNAME"
echo "Hostname: $HOSTNAME"
echo "DNS Servers: ${DNS_SERVERS[@]}"
if [ ${#SEARCH_DOMAINS[@]} -gt 0 ]; then
    echo "Search Domains: ${SEARCH_DOMAINS[@]}"
fi
if [ -n "$SSH_KEY" ]; then
    echo "SSH Key: ${SSH_KEY:0:20}..."
fi
echo "Config File: $CONFIG_FILE"

echo ""
read -p "Generate configuration file? (y/N): " confirm
if [[ "$confirm" =~ ^[Yy]$ ]]; then
    generate_config
    echo "‚úÖ Configuration saved to $CONFIG_FILE"
    echo ""
    echo "üèóÔ∏è  Next Steps:"
    echo "1. Review the configuration file: cat $CONFIG_FILE"
    echo "2. Build the ISO: make build-iso CONFIG_FILE=$CONFIG_FILE"
    echo "3. Or edit the file manually to add advanced options"
    echo ""
    echo "üìñ For advanced configuration options, see:"
    echo "   - config-examples/advanced-config.toml"
    echo "   - docs/ISO_BUILDING.md"
else
    echo "Configuration not saved."
fi 