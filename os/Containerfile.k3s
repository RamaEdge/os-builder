# Fedora bootc with K3s for edge computing
# Optimized build with better layer caching and security practices
FROM quay.io/fedora/fedora-bootc:42

# Build arguments for version information
ARG K3S_VERSION="latest"
ARG OTEL_VERSION="0.127.0"
ARG VCS_REF
ARG VERSION

# Metadata labels following OCI standards
LABEL org.opencontainers.image.title="Edge OS - Fedora bootc with K3s" \
      org.opencontainers.image.description="Fedora bootc with K3s Kubernetes for edge computing" \
      org.opencontainers.image.version="${VERSION}" \
      org.opencontainers.image.revision="${VCS_REF}" \
      org.opencontainers.image.vendor="RamaEdge" \
      org.opencontainers.image.licenses="MIT" \
      containers.bootc=1 \
      k3s.version="${K3S_VERSION}" \
      k3s.distribution="k3s" \
      otel.version="${OTEL_VERSION}"

# Install system packages in a single layer with cleanup
RUN --mount=type=cache,target=/var/cache/dnf \
    dnf install -y \
        openssh-server \
        sudo \
        podman \
        kubernetes-client \
        NetworkManager \
        firewalld \
        policycoreutils-python-utils \
        systemd-resolved \
        chrony \
        curl \
        tar \
        zstd \
        skopeo \
        containerd \
        jq && \
    # Security hardening - remove setuid/setgid from unnecessary binaries (fixed grouping)
    find /usr -type f \( \( -perm -4000 -o -perm -2000 \) -a \( -name chfn -o -name chsh -o -name newgrp \) \) \
        -exec chmod u-s {} \; && \
    # Clean up package cache
    dnf clean all && \
    rm -rf /var/cache/dnf/* /tmp/* /var/tmp/*

# Download and install K3s with container images in separate layer for better caching
RUN --mount=type=cache,target=/tmp/k3s-cache \
    # Create directories
    mkdir -p /var/lib/rancher/k3s/agent/images \
             /etc/rancher/k3s \
             /usr/local/bin && \
    # Download K3s binary
    ARCH=$(uname -m | sed 's/x86_64/amd64/;s/aarch64/arm64/') && \
    K3S_RELEASE=$(curl -sL https://api.github.com/repos/k3s-io/k3s/releases/latest | jq -r .tag_name) && \
    curl -sL "https://github.com/k3s-io/k3s/releases/download/${K3S_RELEASE}/k3s-${ARCH}" \
        -o /usr/local/bin/k3s && \
    chmod +x /usr/local/bin/k3s && \
    # Download airgap images for offline operation (using correct .tar.zst format)
    curl -sL "https://github.com/k3s-io/k3s/releases/download/${K3S_RELEASE}/k3s-airgap-images-${ARCH}.tar.zst" \
        -o "/var/lib/rancher/k3s/agent/images/k3s-airgap-images-${ARCH}.tar.zst" && \
    # Create kubectl symlink
    ln -sf /usr/local/bin/k3s /usr/local/bin/kubectl

# Install OpenTelemetry Collector via official RPM package
RUN --mount=type=cache,target=/var/cache/dnf \
    ARCH=$(uname -m | sed 's/x86_64/amd64/;s/aarch64/arm64/') && \
    # Download and install OpenTelemetry Collector RPM
    curl -fsSL "https://github.com/open-telemetry/opentelemetry-collector-releases/releases/download/v${OTEL_VERSION}/otelcol_${OTEL_VERSION}_linux_${ARCH}.rpm" \
        -o /tmp/otelcol.rpm && \
    dnf install -y /tmp/otelcol.rpm && \
    rm -f /tmp/otelcol.rpm

# Configure services and directories
RUN mkdir -p /etc/containers/systemd \
             /etc/otelcol \
             /etc/rancher/k3s/manifests \
             /var/lib/k3s \
             /var/log/k3s && \
    # Enable base services that exist by default
    systemctl enable sshd \
                    chronyd \
                    systemd-resolved \
                    podman.socket \
                    otelcol && \
    # Enable bootc auto-updates with our custom timer
    systemctl enable bootc-fetch-apply-updates.timer && \
    # Configure firewall for K3s and observability
    firewall-offline-cmd --add-service=ssh && \
    firewall-offline-cmd --add-port=6443/tcp \
                        --add-port=8080/tcp \
                        --add-port=10250/tcp \
                        --add-port=4317/tcp \
                        --add-port=4318/tcp \
                        --add-port=9090/tcp \
                        --add-port=8888/tcp

# Copy configuration files (optimized order for better caching)
COPY configs/containers/ /etc/containers/
COPY configs/otelcol/ /etc/otelcol/
COPY configs/k3s/ /etc/rancher/k3s/
COPY manifests/ /etc/rancher/k3s/manifests/
COPY systemd/*.service /usr/lib/systemd/system/
COPY systemd/k3s/ /usr/lib/systemd/system/
COPY systemd/bootc-fetch-apply-updates.timer.d/ /usr/lib/systemd/system/bootc-fetch-apply-updates.timer.d/
COPY scripts/ /usr/local/bin/

# Final configuration and permissions
RUN chmod +x /usr/local/bin/*.sh 2>/dev/null || true && \
    # Enable services that depend on copied service files
    # Enable each service individually to catch missing/malformed service files
    for service in k3s.service k3s-load-images.service edge-setup.service k3s-kubeconfig-setup.service observability-deploy.service; do \
        if [ -f "/usr/lib/systemd/system/$service" ]; then \
            systemctl enable "$service" || echo "Warning: Failed to enable $service"; \
        else \
            echo "Warning: Service file $service not found, skipping"; \
        fi; \
    done && \
    # SELinux context restoration
    restorecon -R /etc /usr/local/bin 2>/dev/null || true && \
    # Create non-root user for container security compliance
    useradd -r -s /sbin/nologin -d /var/empty -c "Container user" containeruser && \
    # Validate bootc container
    bootc container lint

# Switch to non-root user for container security compliance
# Note: This is for container image security; bootc will use system users when booted
USER containeruser

# This is a bootc image - no CMD needed as it will be converted to a bootable OS
# When booted, systemd will be PID 1, not a container command 