name: 'Trivy Security Scan'
description: 'Container image vulnerability scanning with tar export'
author: 'os-builder'

inputs:
  scan-ref:
    description: 'Container image reference to scan'
    required: true
  output-format:
    description: 'Output format (sarif, table, json)'
    required: false
    default: 'table'
  output-file:
    description: 'Output file path (for sarif/json formats)'
    required: false
  severity:
    description: 'Vulnerability severity levels'
    required: false
    default: 'CRITICAL,HIGH'
  upload-sarif:
    description: 'Upload SARIF results to GitHub Security tab'
    required: false
    default: 'false'
  sarif-category:
    description: 'SARIF category for GitHub Security tab'
    required: false
    default: 'trivy-scan'

outputs:
  results-file:
    description: 'Path to scan results file'
    value: ${{ steps.scan.outputs.results_file }}
  tar-file:
    description: 'Path to exported tar file'
    value: ${{ steps.export.outputs.tar_file }}

runs:
  using: 'composite'
  steps:
    - name: Detect container runtime
      id: runtime
      shell: bash
      run: |
        echo "🔍 Detecting container runtime for image export..."
        if command -v podman >/dev/null 2>&1; then
          echo "runtime=podman" >> $GITHUB_OUTPUT
          echo "Using Podman runtime"
        elif command -v docker >/dev/null 2>&1; then
          echo "runtime=docker" >> $GITHUB_OUTPUT
          echo "Using Docker runtime"
        else
          echo "❌ No container runtime found!"
          exit 1
        fi

    - name: Export container image to tar
      id: export
      shell: bash
      run: |
        echo "📦 Exporting container image to tar file..."
        
        # Create clean tar filename from image reference
        TAR_FILE="$(echo '${{ inputs.scan-ref }}' | sed 's|[:/]|-|g')-$(date +%s).tar"
        echo "tar_file=${TAR_FILE}" >> $GITHUB_OUTPUT
        
        # Export image using detected runtime
        RUNTIME="${{ steps.runtime.outputs.runtime }}"
        echo "Exporting ${{ inputs.scan-ref }} to ${TAR_FILE} using ${RUNTIME}..."
        
        if [ "$RUNTIME" = "podman" ]; then
          podman save --output "${TAR_FILE}" "${{ inputs.scan-ref }}"
        else
          docker save --output "${TAR_FILE}" "${{ inputs.scan-ref }}"
        fi
        
        # Verify tar file was created
        if [ ! -f "${TAR_FILE}" ]; then
          echo "❌ Failed to create tar file: ${TAR_FILE}"
          exit 1
        fi
        
        TAR_SIZE=$(du -h "${TAR_FILE}" | cut -f1)
        echo "✅ Successfully exported image to tar file: ${TAR_FILE} (${TAR_SIZE})"

    - name: Set scan parameters
      id: setup
      shell: bash
      run: |
        # Generate default output file if not provided
        if [ -z "${{ inputs.output-file }}" ] && [ "${{ inputs.output-format }}" != "table" ]; then
          OUTPUT_FILE="trivy-container-results.${{ inputs.output-format }}"
        else
          OUTPUT_FILE="${{ inputs.output-file }}"
        fi
        
        echo "output_file=${OUTPUT_FILE}" >> $GITHUB_OUTPUT
        
        # Log scan details
        echo "🔍 Trivy scan configuration:"
        echo "  Target: ${{ inputs.scan-ref }}"
        echo "  Tar file: ${{ steps.export.outputs.tar_file }}"
        echo "  Format: ${{ inputs.output-format }}"
        echo "  Severity: ${{ inputs.severity }}"

    - name: Run container vulnerability scan
      id: scan
      shell: bash
      run: |
        echo "🔍 Scanning container tar file: ${{ steps.export.outputs.tar_file }}"
        
        if [ "${{ inputs.output-format }}" = "table" ]; then
          trivy image --config .trivy.yaml \
            --input ${{ steps.export.outputs.tar_file }} \
            --severity ${{ inputs.severity }} \
            --format table
        else
          trivy image --config .trivy.yaml \
            --input ${{ steps.export.outputs.tar_file }} \
            --severity ${{ inputs.severity }} \
            --format ${{ inputs.output-format }} \
            --output ${{ steps.setup.outputs.output_file }}
          echo "results_file=${{ steps.setup.outputs.output_file }}" >> $GITHUB_OUTPUT
        fi
      env:
        TRIVY_SKIP_CHECK_UPDATE: "true"
        TRIVY_CLOUD_DISABLE: "true"
        TRIVY_SCANNERS: "vuln"

    - name: Upload SARIF to Security tab
      if: inputs.upload-sarif == 'true' && inputs.output-format == 'sarif' && steps.setup.outputs.output_file != ''
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: ${{ steps.setup.outputs.output_file }}
        category: ${{ inputs.sarif-category }}

    - name: Cleanup tar file
      shell: bash
      run: |
        echo "🧹 Cleaning up tar file..."
        rm -f "${{ steps.export.outputs.tar_file }}"
        echo "✅ Tar file cleanup completed" 