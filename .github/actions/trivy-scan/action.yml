name: 'Unified Security Scan'
description: 'Comprehensive security scanning with Trivy - handles filesystem, config, secrets, and container images with automatic tar export'
author: 'os-builder'
branding:
  icon: 'shield'
  color: 'blue'

inputs:
  scan-type:
    description: 'Type of scan to perform (fs, config, secret, image, container, repo, k8s, sbom)'
    required: true
  scan-ref:
    description: 'Scan target (filesystem path, image reference, tar file path, etc.)'
    required: true
  output-format:
    description: 'Output format for scan results (sarif, table, json)'
    required: false
    default: 'sarif'
  output-file:
    description: 'Output file path (required for sarif/json formats)'
    required: false
  severity:
    description: 'Vulnerability severity levels to scan for'
    required: false
    default: 'CRITICAL,HIGH'
  generate-sbom:
    description: 'Generate SBOM for container images (default: false)'
    required: false
    default: 'false'
  upload-sarif:
    description: 'Upload SARIF results to GitHub Security tab (default: false)'
    required: false
    default: 'false'
  sarif-category:
    description: 'SARIF category for GitHub Security tab'
    required: false
    default: 'trivy-scan'

outputs:
  results-file:
    description: 'Path to scan results file'
    value: ${{ steps.scan.outputs.results_file }}
  sbom-file:
    description: 'Path to SBOM file (if generated)'
    value: ${{ steps.sbom.outputs.sbom_file }}


runs:
  using: 'composite'
  steps:
    - name: Clear Trivy cache and problematic policies
      shell: bash
      run: |
        echo "🧹 Clearing Trivy cache to avoid policy parsing errors..."
        # Clear all possible cache locations
        rm -rf ~/.cache/trivy ~/.local/share/trivy ~/.trivy 2>/dev/null || true
        rm -rf /tmp/trivy* 2>/dev/null || true
        rm -rf ${GITHUB_WORKSPACE}/.cache/trivy 2>/dev/null || true
        echo "✅ Trivy cache cleared"

    # Container scanning now uses image references directly (no tar export needed)

    - name: Set scan parameters
      id: setup
      shell: bash
      run: |
        # Determine scan target and type
        if [ "${{ inputs.scan-type }}" = "container" ]; then
          # For container scan, use the original image reference directly
          SCAN_TARGET="${{ inputs.scan-ref }}"
          TRIVY_SCAN_TYPE="image"
          USE_INPUT=""
        else
          SCAN_TARGET="${{ inputs.scan-ref }}"
          TRIVY_SCAN_TYPE="${{ inputs.scan-type }}"
          USE_INPUT=""
        fi
        
        echo "scan_target=${SCAN_TARGET}" >> $GITHUB_OUTPUT
        echo "trivy_scan_type=${TRIVY_SCAN_TYPE}" >> $GITHUB_OUTPUT
        
        # Generate default output file if not provided
        if [ -z "${{ inputs.output-file }}" ]; then
          case "${{ inputs.output-format }}" in
            sarif)
              OUTPUT_FILE="trivy-${{ inputs.scan-type }}-results.sarif"
              ;;
            json)
              OUTPUT_FILE="trivy-${{ inputs.scan-type }}-results.json"
              ;;
            table)
              OUTPUT_FILE=""  # Table format doesn't need output file
              ;;
            *)
              OUTPUT_FILE="trivy-${{ inputs.scan-type }}-results.${{ inputs.output-format }}"
              ;;
          esac
        else
          OUTPUT_FILE="${{ inputs.output-file }}"
        fi
        
        echo "output_file=${OUTPUT_FILE}" >> $GITHUB_OUTPUT
        echo "Using output file: ${OUTPUT_FILE}"
        
        # Log scan details
        echo "🔍 Trivy scan configuration:"
        echo "  Input Type: ${{ inputs.scan-type }}"
        echo "  Trivy Type: ${TRIVY_SCAN_TYPE}"
        echo "  Target: ${SCAN_TARGET}"
        echo "  Format: ${{ inputs.output-format }}"
        echo "  Severity: ${{ inputs.severity }}"

    - name: Run Trivy scan
      id: scan
      uses: aquasecurity/trivy-action@0.30.0
      with:
        scan-type: ${{ steps.setup.outputs.trivy_scan_type }}
        scan-ref: ${{ steps.setup.outputs.scan_target }}
        format: ${{ inputs.output-format }}
        output: ${{ steps.setup.outputs.output_file }}
        severity: ${{ inputs.severity }}
        trivy-config: '.trivy.yaml'
        skip-dirs: '/var/cache'
        skip-files: '*.log'
        scanners: 'vuln,secret'  # ONLY vulnerabilities and secrets - NO cloud policies
      env:
        # Clear any container runtime environment variables for tar file scanning
        CONTAINER_HOST: ""
        DOCKER_HOST: ""
        # Completely disable cloud policies and misconfig scanning
        TRIVY_SKIP_CHECK_UPDATE: "true"
        TRIVY_OFFLINE_SCAN: "false"
        TRIVY_RESET: "true"
        # Disable ALL policy downloads and checks
        TRIVY_DISABLE_MISCONFIG: "true"
        TRIVY_SKIP_POLICY_UPDATE: "true"

    - name: Generate SBOM
      id: sbom
      if: inputs.generate-sbom == 'true' && inputs.scan-type == 'container'
      shell: bash
      run: |
        echo "📋 Generating SBOM for container image..."
        
        SBOM_FILE="sbom-$(echo '${{ inputs.scan-ref }}' | sed 's|[:/]|-|g')-$(date +%s).spdx.json"
        echo "sbom_file=${SBOM_FILE}" >> $GITHUB_OUTPUT
        
        # Generate SBOM from container image directly
        if command -v syft >/dev/null 2>&1; then
          syft "${{ inputs.scan-ref }}" -o spdx-json="${SBOM_FILE}"
          echo "✅ SBOM generated: ${SBOM_FILE}"
        else
          echo "⚠️  Syft not found, using anchore/sbom-action fallback"
          echo "SBOM generation requires syft to be installed"
          exit 1
        fi

    - name: Upload SARIF to Security tab
      if: inputs.upload-sarif == 'true' && inputs.output-format == 'sarif'
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: ${{ steps.setup.outputs.output_file }}
        category: ${{ inputs.sarif-category }}

    # No cleanup needed since we scan images directly

    - name: Set outputs
      shell: bash
      run: |
        echo "results_file=${{ steps.setup.outputs.output_file }}" >> $GITHUB_OUTPUT 