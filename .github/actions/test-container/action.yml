name: 'Test Container Image'
description: 'Run comprehensive tests on built container images'
author: 'os-builder'
branding:
  icon: 'check-circle'
  color: 'green'

inputs:
  image-ref:
    description: 'Container image reference to test'
    required: true
  test-type:
    description: 'Type of tests to run (k3s, microshift, bootc)'
    required: true

outputs:
  test_results:
    description: 'Test results summary'
    value: ${{ steps.test.outputs.test_results }}

runs:
  using: 'composite'
  steps:
    - name: Run container tests
      id: test
      shell: bash
      run: |
        echo "üß™ Testing container image: ${{ inputs.image-ref }}"
        echo "üìã Test type: ${{ inputs.test-type }}"
        
        # Detect container runtime
        if command -v podman >/dev/null 2>&1; then
          RUNTIME="podman"
        elif command -v docker >/dev/null 2>&1; then
          RUNTIME="docker"
        else
          echo "‚ùå No container runtime found!"
          exit 1
        fi
        echo "üîß Using runtime: $RUNTIME"
        
        IMAGE_REF="${{ inputs.image-ref }}"
        PASSED=0
        FAILED=0
        
        # Test execution function
        run_test() {
          local test_name="$1"
          local test_cmd="$2"
          echo "üîπ Testing: $test_name"
          if $RUNTIME run --rm "$IMAGE_REF" /bin/bash -c "$test_cmd" >/dev/null 2>&1; then
            echo "  ‚úÖ PASSED"
            return 0
          else
            echo "  ‚ùå FAILED"
            # Store failed test name for summary
            FAILED_TESTS+=("$test_name")
            return 1
          fi
        }
        
        # Common tests for all image types
        echo "üì¶ Running common tests..."
        FAILED_TESTS=()
        run_test "bootc status" "bootc status || true" && ((PASSED++)) || ((FAILED++))
        run_test "systemd version" "systemctl --version | head -1" && ((PASSED++)) || ((FAILED++))
        
        # Type-specific tests
        case "${{ inputs.test-type }}" in
          "k3s")
            echo "üéØ Running K3s tests..."
            run_test "k3s binary" "k3s --version || command -v k3s" && ((PASSED++)) || ((FAILED++))
            run_test "kubectl binary" "kubectl version --client || command -v kubectl" && ((PASSED++)) || ((FAILED++))
            run_test "otelcol binary" "/usr/bin/otelcol --version || command -v otelcol" && ((PASSED++)) || ((FAILED++))
            run_test "k3s manifests" "ls /etc/rancher/k3s/manifests/ >/dev/null 2>&1 || echo 'No manifests'" && ((PASSED++)) || ((FAILED++))
            ;;
            
          "microshift")
            echo "üéØ Running MicroShift tests..."
            run_test "microshift binary" "microshift version || command -v microshift" && ((PASSED++)) || ((FAILED++))
            run_test "kubectl binary" "kubectl version --client || command -v kubectl" && ((PASSED++)) || ((FAILED++))
            run_test "microshift manifests" "[ -d /etc/microshift/manifests ] && [ \$(ls -A /etc/microshift/manifests/*.yaml 2>/dev/null | wc -l) -gt 0 ]" && ((PASSED++)) || ((FAILED++))
            ;;
            
          "bootc")
            echo "üéØ Running bootc-only tests..."
            # Only common tests above
            ;;
            
          *)
            echo "‚ùå Unknown test type: ${{ inputs.test-type }}"
            echo "Supported types: k3s, microshift, bootc"
            exit 1
            ;;
        esac
        
        # Generate results summary
        TOTAL=$((PASSED + FAILED))
        echo ""
        echo "üìä Test Results:"
        echo "  Total: $TOTAL, Passed: $PASSED, Failed: $FAILED"
        
        # Show failed tests if any
        if [ ${#FAILED_TESTS[@]} -gt 0 ]; then
          echo "‚ùå Failed tests:"
          for test in "${FAILED_TESTS[@]}"; do
            echo "  - $test"
          done
        fi
        
        # Set output
        echo "test_results=total=$TOTAL,passed=$PASSED,failed=$FAILED" >> $GITHUB_OUTPUT
        
        if [ $FAILED -eq 0 ]; then
          echo "‚úÖ All tests passed!"
          exit 0
        else
          echo "‚ö†Ô∏è $FAILED test(s) failed"
          exit 1
        fi 