name: 'Security Scan'
description: 'Run comprehensive security scans on container images via tar export'
author: 'os-builder'
branding:
  icon: 'shield'
  color: 'red'

inputs:
  image-ref:
    description: 'Container image reference to scan'
    required: true
  severity:
    description: 'Scan severity level'
    required: false
    default: 'CRITICAL,HIGH'
  build-mode:
    description: 'Build mode for artifact naming'
    required: true
  sha:
    description: 'Git commit SHA'
    required: true

outputs:
  sbom-artifact:
    description: 'SBOM artifact name'
    value: ${{ steps.scan.outputs.sbom_artifact }}
  tar-file:
    description: 'Exported tar file path'
    value: ${{ steps.export.outputs.tar_file }}

runs:
  using: 'composite'
  steps:
    - name: Detect container runtime configuration
      id: runtime-config
      shell: bash
      run: |
        echo "🔍 Detecting container runtime configuration..."
        
        # Check for available container runtime
        if command -v podman >/dev/null 2>&1; then
          echo "runtime=podman" >> $GITHUB_OUTPUT
          echo "Using Podman runtime"
        elif command -v docker >/dev/null 2>&1; then
          echo "runtime=docker" >> $GITHUB_OUTPUT
          echo "Using Docker runtime"
        else
          echo "❌ No container runtime found!"
          exit 1
        fi

    - name: Export container image to tar
      id: export
      shell: bash
      run: |
        echo "📦 Exporting container image to tar file..."
        
        # Create clean tar filename from image reference
        TAR_FILE="$(echo '${{ inputs.image-ref }}' | sed 's|[:/]|-|g')-${{ inputs.sha }}.tar"
        echo "tar_file=${TAR_FILE}" >> $GITHUB_OUTPUT
        
        # Export image using detected runtime
        RUNTIME="${{ steps.runtime-config.outputs.runtime }}"
        echo "Exporting ${{ inputs.image-ref }} to ${TAR_FILE} using ${RUNTIME}..."
        
        if [ "$RUNTIME" = "podman" ]; then
          podman save --output "${TAR_FILE}" "${{ inputs.image-ref }}"
        else
          docker save --output "${TAR_FILE}" "${{ inputs.image-ref }}"
        fi
        
        # Verify tar file was created
        if [ ! -f "${TAR_FILE}" ]; then
          echo "❌ Failed to create tar file: ${TAR_FILE}"
          exit 1
        fi
        
        TAR_SIZE=$(du -h "${TAR_FILE}" | cut -f1)
        echo "✅ Successfully exported image to tar file: ${TAR_FILE} (${TAR_SIZE})"

    - name: Set scan outputs
      id: scan
      shell: bash
      run: |
        # Set SBOM artifact name for upload
        SBOM_ARTIFACT="sbom-${{ inputs.build-mode }}-${{ inputs.sha }}"
        echo "sbom_artifact=${SBOM_ARTIFACT}" >> $GITHUB_OUTPUT
        echo "Using SBOM artifact name: ${SBOM_ARTIFACT}"

    - name: Run Trivy vulnerability scanner - SARIF output
      uses: ./.github/actions/trivy-scan
      with:
        scan-type: 'image'
        scan-ref: '${{ steps.export.outputs.tar_file }}'
        output-format: 'sarif'
        severity: ${{ inputs.severity }}

    - name: Run Trivy vulnerability scanner - Table output
      uses: ./.github/actions/trivy-scan
      with:
        scan-type: 'image'
        scan-ref: '${{ steps.export.outputs.tar_file }}'
        output-format: 'table'
        severity: ${{ inputs.severity }}

    - name: Generate container image SBOM from tar
      uses: anchore/sbom-action@v0
      with:
        image: '${{ steps.export.outputs.tar_file }}'
        format: spdx-json
        output-file: sbom.spdx.json

    - name: Upload SBOM artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ steps.scan.outputs.sbom_artifact }}
        path: sbom.spdx.json

    - name: Upload tar file artifact (optional)
      uses: actions/upload-artifact@v4
      if: ${{ false }}  # Disabled by default due to size, enable if needed
      with:
        name: container-tar-${{ inputs.build-mode }}-${{ inputs.sha }}
        path: ${{ steps.export.outputs.tar_file }}
        retention-days: 7

    - name: Cleanup tar file
      shell: bash
      run: |
        echo "🧹 Cleaning up tar file..."
        rm -f "${{ steps.export.outputs.tar_file }}"
        echo "✅ Tar file cleanup completed" 