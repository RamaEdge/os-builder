name: Dependency Security Monitoring

on:
  schedule:
    # Check for dependency updates weekly on Mondays
    - cron: '0 6 * * 1'
  workflow_dispatch:

jobs:
  check-base-image:
    name: Check Base Image Updates
    runs-on: self-hosted
    permissions:
      contents: read
      security-events: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Extract and scan base image
        id: base-scan
        run: |
          BASE_IMAGE=$(grep "^FROM" os/Containerfile.k3s | head -1 | awk '{print $2}')
          echo "base-image=${BASE_IMAGE}" >> $GITHUB_OUTPUT
          echo "ðŸ“¦ Checking base image: ${BASE_IMAGE}"
          
          # Pull and get digest
          podman pull ${BASE_IMAGE}
          DIGEST=$(podman inspect ${BASE_IMAGE} --format='{{.RepoDigests}}')
          echo "Current digest: ${DIGEST}"

      - name: Scan base image for vulnerabilities
        uses: ./.github/actions/trivy-scan
        with:
          scan-type: 'image'
          scan-ref: ${{ steps.base-scan.outputs.base-image }}
          output-format: 'sarif'
          severity: 'CRITICAL,HIGH'

  check-version-updates:
    name: Check Version Updates
    runs-on: self-hosted
    permissions:
      contents: write
      pull-requests: write
    strategy:
      matrix:
        component:
          - name: "otel"
            display_name: "OpenTelemetry Collector"
            version_arg: "OTEL_VERSION"
            api_url: "https://api.github.com/repos/open-telemetry/opentelemetry-collector-releases/releases/latest"
            version_extract: "sed 's/^v//'"
            files: "os/Containerfile.k3s os/Containerfile.fedora.optimized"
            labels: "dependencies,opentelemetry,chore,security"
          - name: "k3s"
            display_name: "K3s"
            version_arg: "K3S_VERSION"
            api_url: "https://api.github.com/repos/k3s-io/k3s/releases/latest"
            version_extract: "cat"
            files: "os/Containerfile.k3s"
            labels: "dependencies,k3s,chore,security,kubernetes"
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Get versions and compare
        id: versions
        run: |
          # Get current version
          CURRENT=$(grep 'ARG ${{ matrix.component.version_arg }}=' ${{ matrix.component.files }} | head -1 | cut -d'"' -f2)
          echo "current=${CURRENT}" >> $GITHUB_OUTPUT
          
          # Get latest version
          LATEST=$(curl -s ${{ matrix.component.api_url }} | grep '"tag_name"' | cut -d'"' -f4 | ${{ matrix.component.version_extract }})
          echo "latest=${LATEST}" >> $GITHUB_OUTPUT
          
          # Compare
          if [ "$CURRENT" != "$LATEST" ]; then
            echo "update-needed=true" >> $GITHUB_OUTPUT
            echo "ðŸ†• ${{ matrix.component.display_name }} update: ${CURRENT} â†’ ${LATEST}"
          else
            echo "update-needed=false" >> $GITHUB_OUTPUT
            echo "âœ… ${{ matrix.component.display_name }} already latest: ${CURRENT}"
          fi

      - name: Create update PR
        if: steps.versions.outputs.update-needed == 'true'
        run: |
          LATEST="${{ steps.versions.outputs.latest }}"
          CURRENT="${{ steps.versions.outputs.current }}"
          BRANCH="chore/update-${{ matrix.component.name }}-${LATEST}"
          
          # Configure git
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          # Create branch and update files
          git checkout -b "$BRANCH"
          sed -i "s/ARG ${{ matrix.component.version_arg }}=\".*\"/ARG ${{ matrix.component.version_arg }}=\"${LATEST}\"/g" ${{ matrix.component.files }}
          
          # Commit and push
          git add ${{ matrix.component.files }}
          git commit -m "chore(deps): update ${{ matrix.component.display_name }} to ${LATEST}"
          git push origin "$BRANCH"
          
          # Create PR using GitHub CLI
          cat > pr_body.md << 'EOF'
          ## ðŸ”„ ${{ matrix.component.display_name }} Update
          
          - **Previous**: ${{ steps.versions.outputs.current }}
          - **New**: ${{ steps.versions.outputs.latest }}
          - **Release**: [${{ steps.versions.outputs.latest }}](https://github.com/${{ matrix.component.name == 'otel' && 'open-telemetry/opentelemetry-collector-releases' || 'k3s-io/k3s' }}/releases/tag/${{ steps.versions.outputs.latest }})
          
          ### Testing Checklist
          - [ ] Container builds successfully
          - [ ] Service starts correctly  
          - [ ] No regression in functionality
          
          ðŸ¤– **Automated update** by dependency monitoring workflow.
          EOF
          
          gh pr create \
            --title "chore(deps): update ${{ matrix.component.display_name }} to ${LATEST}" \
            --body-file pr_body.md \
            --head "$BRANCH" \
            --base main \
            --label "${{ matrix.component.labels }}"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  analyze-packages:
    name: Analyze Packages
    runs-on: self-hosted
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Extract and analyze packages
        run: |
          echo "ðŸ“¦ Extracting package information..."
          
          # Extract packages from all Containerfiles
          find os -name "Containerfile*" -exec grep -h "dnf install" {} \; | \
            sed 's/.*dnf install -y//' | \
            tr ' ' '\n' | \
            grep -E '^[a-zA-Z]' | \
            sort -u > package-list.txt
          
          echo "Found $(wc -l < package-list.txt) unique packages"
          echo "Top 10 packages:"
          head -10 package-list.txt

      - name: Upload package analysis
        uses: actions/upload-artifact@v4
        with:
          name: package-analysis
          path: package-list.txt

  security-summary:
    name: Security Summary
    runs-on: self-hosted
    needs: [check-base-image, check-version-updates, analyze-packages]
    if: always()
    steps:
      - name: Generate and upload summary
        run: |
          cat > security-summary.md << EOF
          # ðŸ”’ Weekly Security Review - $(date -u +"%Y-%m-%d")
          
          ## Summary
          Automated security review of Fedora bootc container images.
          
          ## Scans Performed
          - âœ… Base image vulnerability scan
          - âœ… Package vulnerability analysis  
          - âœ… Version update checks (OTEL, K3s)
          
          ## Next Steps
          1. Review Security tab for findings
          2. Check for any new PRs from version updates
          3. Address critical/high severity issues
          
          ## Links
          - [Security Tab](https://github.com/${{ github.repository }}/security)
          - [Workflow Runs](https://github.com/${{ github.repository }}/actions)
          EOF
          
          echo "ðŸ“‹ Security review completed"

      - name: Upload security summary
        uses: actions/upload-artifact@v4
        with:
          name: security-summary
          path: security-summary.md 