name: Dependency Security Monitoring

on:
  schedule:
    # Check for dependency updates weekly on Mondays
    - cron: '0 6 * * 1'
  workflow_dispatch:
    inputs:
      components:
        description: 'Components to check (comma-separated: k3s,otel,microshift,fedora)'
        default: 'k3s,otel,microshift,fedora'
        type: string
      force_update:
        description: 'Force create PRs even if no updates'
        default: false
        type: boolean

# Centralized environment configuration
env:
  PR_LABELS: 'dependencies,automated-update,security'

jobs:
  # Load current versions from centralized file
  load-versions:
    name: Load Current Versions
    runs-on: self-hosted
    outputs:
      k3s-version: ${{ steps.versions.outputs.k3s-version }}
      otel-version: ${{ steps.versions.outputs.otel-version }}
      microshift-version: ${{ steps.versions.outputs.microshift-version }}
      fedora-version: ${{ steps.versions.outputs.fedora-version }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Load version configuration
        id: versions
        uses: ./.github/actions/load-versions

  # Check for version updates using matrix strategy
  check-updates:
    name: Check Updates
    runs-on: self-hosted
    needs: load-versions
    permissions:
      contents: write
      pull-requests: write
    strategy:
      fail-fast: false
      matrix:
        component:
          - name: "k3s"
            display_name: "K3s"
            version_key: "K3S_VERSION"
            current_version: ${{ needs.load-versions.outputs.k3s-version }}
            api_url: "https://api.github.com/repos/k3s-io/k3s/releases/latest"
            version_extract: "cat"
            labels: "k3s,kubernetes,container-runtime"
            
          - name: "otel"
            display_name: "OpenTelemetry Collector"
            version_key: "OTEL_VERSION"
            current_version: ${{ needs.load-versions.outputs.otel-version }}
            api_url: "https://api.github.com/repos/open-telemetry/opentelemetry-collector-releases/releases/latest"
            version_extract: "sed 's/^v//'"
            labels: "opentelemetry,observability,telemetry"
            
          - name: "microshift"
            display_name: "MicroShift"
            version_key: "MICROSHIFT_VERSION"
            current_version: ${{ needs.load-versions.outputs.microshift-version }}
            api_url: "https://api.github.com/repos/openshift/microshift/releases/latest"
            version_extract: "cat"
            labels: "microshift,kubernetes,openshift"
            
          - name: "fedora"
            display_name: "Fedora"
            version_key: "FEDORA_VERSION"
            current_version: ${{ needs.load-versions.outputs.fedora-version }}
            # Custom check for Fedora versions (not using GitHub API)
            api_url: ""
            version_extract: ""
            labels: "fedora,base-image,os"

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Check if component should be updated
        id: should-update
        run: |
          COMPONENTS="${{ github.event.inputs.components || 'k3s,otel,microshift,fedora' }}"
          
          if echo "$COMPONENTS" | grep -q "${{ matrix.component.name }}"; then
            echo "should-update=true" >> $GITHUB_OUTPUT
            echo "✅ ${{ matrix.component.display_name }} scheduled for update check"
          else
            echo "should-update=false" >> $GITHUB_OUTPUT
            echo "⏭️ Skipping ${{ matrix.component.display_name }} (not in component list)"
          fi

      - name: Get latest version
        id: latest
        if: steps.should-update.outputs.should-update == 'true'
        run: |
          CURRENT="${{ matrix.component.current_version }}"
          echo "current=${CURRENT}" >> $GITHUB_OUTPUT
          
          case "${{ matrix.component.name }}" in
            "fedora")
              # Check Fedora release schedule or use a fixed update pattern
              # For now, we'll check if there's a newer major version available
              LATEST=$(curl -s "https://release.fedoraproject.org/data/releases.json" | \
                jq -r '.[] | select(.version | tonumber >= ($CURRENT | tonumber)) | .version' | \
                sort -V | tail -1 2>/dev/null || echo "$CURRENT")
              ;;
            *)
              if [ -n "${{ matrix.component.api_url }}" ]; then
                LATEST=$(curl -s "${{ matrix.component.api_url }}" | \
                  grep '"tag_name"' | cut -d'"' -f4 | ${{ matrix.component.version_extract }})
              else
                LATEST="$CURRENT"
              fi
              ;;
          esac
          
          echo "latest=${LATEST}" >> $GITHUB_OUTPUT
          
          if [ "$CURRENT" != "$LATEST" ] || [ "${{ github.event.inputs.force_update }}" = "true" ]; then
            echo "update-needed=true" >> $GITHUB_OUTPUT
            echo "🆕 ${{ matrix.component.display_name }} update available: ${CURRENT} → ${LATEST}"
          else
            echo "update-needed=false" >> $GITHUB_OUTPUT
            echo "✅ ${{ matrix.component.display_name }} already latest: ${CURRENT}"
          fi

      - name: Update version and create PR
        if: steps.should-update.outputs.should-update == 'true' && steps.latest.outputs.update-needed == 'true'
        run: |
          LATEST="${{ steps.latest.outputs.latest }}"
          CURRENT="${{ steps.latest.outputs.current }}"
          BRANCH="chore/update-${{ matrix.component.name }}-${LATEST}"
          
          echo "🔄 Creating update for ${{ matrix.component.display_name }}: ${CURRENT} → ${LATEST}"
          
          # Configure git
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          # Create branch
          git checkout -b "$BRANCH"
          
          # Update version in versions.txt
          sed -i "s/^${{ matrix.component.version_key }}=.*/${{ matrix.component.version_key }}=${LATEST}/" versions.txt
          
          # Verify update
          UPDATED_VERSION=$(grep "^${{ matrix.component.version_key }}=" versions.txt | cut -d'=' -f2)
          if [ "$UPDATED_VERSION" != "$LATEST" ]; then
            echo "❌ Failed to update ${{ matrix.component.version_key }} in versions.txt"
            exit 1
          fi
          
          # Commit changes
          git add versions.txt
          git commit -m "chore(deps): update ${{ matrix.component.display_name }} to ${LATEST}

          - Update ${{ matrix.component.version_key }} from ${CURRENT} to ${LATEST}
          - This update affects all build environments (Makefile and GitHub Actions)
          - Centralized version management ensures consistency"
          
          # Push branch
          git push origin "$BRANCH"
          
          # Create PR body
          cat > pr_body.md << EOF
          ## 🔄 ${{ matrix.component.display_name }} Version Update
          
          This PR updates **${{ matrix.component.display_name }}** to the latest version.
          
          ### Changes
          - **Component**: ${{ matrix.component.display_name }}
          - **Previous Version**: \`${CURRENT}\`
          - **New Version**: \`${LATEST}\`
          - **Updated File**: \`versions.txt\`
          
          ### Impact
          This change affects:
          - ✅ Makefile builds (\`make build\`)
          - ✅ GitHub Actions workflows
          - ✅ Container image builds
          - ✅ All environments use centralized version
          
          ### Release Information
          EOF
          
          # Add release link if available
          case "${{ matrix.component.name }}" in
            "k3s")
              echo "- 📋 [K3s Release Notes](https://github.com/k3s-io/k3s/releases/tag/${LATEST})" >> pr_body.md
              ;;
            "otel")
              echo "- 📋 [OpenTelemetry Release Notes](https://github.com/open-telemetry/opentelemetry-collector-releases/releases/tag/v${LATEST})" >> pr_body.md
              ;;
            "microshift")
              echo "- 📋 [MicroShift Release Notes](https://github.com/openshift/microshift/releases/tag/${LATEST})" >> pr_body.md
              ;;
            "fedora")
              echo "- 📋 [Fedora Release Information](https://fedoraproject.org/wiki/Releases/${LATEST})" >> pr_body.md
              ;;
          esac
          
          cat >> pr_body.md << EOF
          
          ### Testing Checklist
          - [ ] Container builds successfully
          - [ ] Service starts correctly
          - [ ] No regression in functionality
          - [ ] Security scan passes
          
          ### Auto-Merge Conditions
          - [ ] All checks pass
          - [ ] No breaking changes detected
          - [ ] Security scans show no new issues
          
          ---
          🤖 **Automated update** by dependency monitoring workflow.
          💡 This PR updates the centralized \`versions.txt\` file used by all build systems.
          EOF
          
          # Create PR
          gh pr create \
            --title "chore(deps): update ${{ matrix.component.display_name }} to ${LATEST}" \
            --body-file pr_body.md \
            --head "$BRANCH" \
            --base main \
            --label "${{ env.PR_LABELS }},${{ matrix.component.labels }}"
          
          echo "✅ Created PR for ${{ matrix.component.display_name }} update"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

