name: Build MicroShift OS

on:
  workflow_dispatch:
    inputs:
      microshift_version:
        description: 'MicroShift Version (default: release-4.19)'
        default: 'release-4.19'
      iso_config:
        description: 'ISO Configuration'
        default: 'user'
        type: choice
        options: ['minimal', 'user', 'advanced', 'interactive']
      build_iso:
        description: 'Build ISO'
        default: true
        type: boolean

# Centralized environment configuration
env:
  IMAGE_NAME: ramaedge/os-microshift
  REGISTRY: harbor.local
  REPO_OWNER: ramaedge
  CONTAINERFILE: Containerfile.fedora.optimized
  SCAN_SEVERITY: CRITICAL,HIGH,MEDIUM

jobs:
  # Combined build, scan, and test job for efficiency
  build-scan-test:
    name: Build & Test MicroShift OS
    runs-on: ubuntu-22.04
    outputs:
      image-ref: ${{ steps.build.outputs.local-tag }}
      version: ${{ steps.version.outputs.version }}
    permissions:
      contents: read
      packages: write
      security-events: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Load version configuration
        id: versions
        uses: ./.github/actions/load-versions

      - name: Calculate version
        id: version
        uses: ./.github/actions/calculate-version

      - name: Authenticate with Harbor
        uses: ./.github/actions/harbor-auth
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.HARBOR_USERNAME }}
          password: ${{ secrets.HARBOR_PASSWORD }}

      - name: Build container image
        id: build
        uses: ./.github/actions/build-container
        with:
          image-name: ${{ env.IMAGE_NAME }}
          version: ${{ steps.version.outputs.version }}
          sha: ${{ steps.version.outputs.sha }}
          containerfile: ${{ env.CONTAINERFILE }}
          registry: ${{ env.REGISTRY }}
          repository-owner: ${{ env.REPO_OWNER }}
          microshift-version: ${{ github.event.inputs.microshift_version || steps.versions.outputs.microshift-version }}
          fedora-version: ${{ steps.versions.outputs.fedora-version }}

      - name: Security scan
        uses: ./.github/actions/trivy-scan
        with:
          scan-ref: ${{ steps.build.outputs.image-ref }}
          severity: ${{ env.SCAN_SEVERITY }}
          output-format: 'sarif'
          upload-sarif: 'true'
          sarif-category: 'trivy-container-microshift'

      - name: Test container image
        uses: ./.github/actions/test-container
        with:
          image-ref: ${{ steps.build.outputs.image-ref }}
          test-type: 'microshift'

  # Push to Harbor registry (main branch only)
  push:
    name: Push to Harbor Registry
    runs-on: ubuntu-22.04
    needs: build-scan-test
    if: github.ref == 'refs/heads/main' && github.event_name != 'pull_request'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Authenticate with Harbor
        uses: ./.github/actions/harbor-auth
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.HARBOR_USERNAME }}
          password: ${{ secrets.HARBOR_PASSWORD }}

      - name: Tag and push to Harbor
        run: |
          LOCAL_IMAGE="${{ needs.build-scan-test.outputs.image-ref }}"
          HARBOR_IMAGE="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.build-scan-test.outputs.version }}"
          
          echo "üè∑Ô∏è  Tagging image for Harbor registry..."
          echo "Source: $LOCAL_IMAGE"
          echo "Target: $HARBOR_IMAGE"
          
          podman tag "$LOCAL_IMAGE" "$HARBOR_IMAGE"
          
          echo "‚¨ÜÔ∏è  Pushing to Harbor registry..."
          podman push "$HARBOR_IMAGE"
          
          echo "‚úÖ Successfully pushed: $HARBOR_IMAGE"

  # Conditional ISO build
  build-iso:
    name: Build MicroShift ISO
    runs-on: ubuntu-22.04
    needs: build-scan-test
    if: github.event.inputs.build_iso == 'true'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Build MicroShift ISO
        id: iso
        uses: ./.github/actions/build-iso
        with:
          image-ref: ${{ needs.build-scan-test.outputs.image-ref }}
          config: ${{ github.event.inputs.iso_config || 'user' }}