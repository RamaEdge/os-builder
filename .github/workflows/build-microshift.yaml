name: Build MicroShift OS

on:
  workflow_dispatch:
    inputs:
      microshift_version:
        description: 'MicroShift Version/Branch (default: auto-detect from project version)'
        required: false
        default: ''
      iso_config:
        description: 'ISO Configuration'
        required: false
        default: 'user'
        type: choice
        options:
          - minimal
          - user
          - advanced
          - interactive
      build_iso:
        description: 'Build ISO'
        required: false
        default: true
        type: boolean

env:
  IMAGE_NAME: ramaedge-os-microshift
  REGISTRY: ghcr.io
  REPO_OWNER: ramaedge

jobs:
  calculate-version:
    name: Calculate Version
    runs-on: ubuntu-22.04
    outputs:
      version: ${{ steps.version.outputs.version }}
      branch: ${{ steps.version.outputs.branch }}
      sha: ${{ steps.version.outputs.sha }}
      repository-owner: ${{ steps.version.outputs.repository-owner }}
    steps:
      - name: Calculate Version
        id: version
        uses: ./.github/actions/calculate-version

  determine-microshift-version:
    name: Determine MicroShift Version
    runs-on: ubuntu-22.04
    needs: calculate-version
    outputs:
      microshift-version: ${{ steps.microshift.outputs.microshift_version }}
      microshift-image: ${{ steps.microshift.outputs.microshift_image }}
      build-mode: ${{ steps.microshift.outputs.build_mode }}
    steps:
      - name: Determine MicroShift Version Strategy
        id: microshift
        run: |
          INPUT_VERSION="${{ github.event.inputs.microshift_version }}"
          PROJECT_VERSION="${{ needs.calculate-version.outputs.version }}"
          
          if [ -z "$INPUT_VERSION" ]; then
            echo "🎯 Auto-detecting MicroShift version from project version v$PROJECT_VERSION"
            
            # Map project version to MicroShift version strategy
            if [[ "$PROJECT_VERSION" == *"main"* ]] || [[ "$PROJECT_VERSION" == *"dev"* ]]; then
              # On main branch, use latest MicroShift release for stability
              MICROSHIFT_VERSION="release-4.19"
              echo "🎯 Using stable MicroShift release-4.19 for project main branch"
            elif [[ "$PROJECT_VERSION" == *"release"* ]]; then
              # On release branches, use stable MicroShift release
              MICROSHIFT_VERSION="release-4.19"
              echo "🎯 Using stable MicroShift release-4.19 for release branch"
            elif [[ "$PROJECT_VERSION" == *"alpha"* ]] || [[ "$PROJECT_VERSION" == *"beta"* ]]; then
              # Development versions use stable release
              MICROSHIFT_VERSION="release-4.19"
              echo "🎯 Using stable MicroShift release-4.19 for development version"
            else
              # Stable versions use stable MicroShift release
              MICROSHIFT_VERSION="release-4.19"
              echo "🎯 Using stable MicroShift release-4.19 for stable version"
            fi
          else
            echo "🔧 Using user-specified MicroShift version: $INPUT_VERSION"
            MICROSHIFT_VERSION="$INPUT_VERSION"
          fi
          
          echo "microshift_version=${MICROSHIFT_VERSION}" >> $GITHUB_OUTPUT
          
          # Reference the pre-built MicroShift image from microshift-builder repository
          MICROSHIFT_IMAGE="ghcr.io/ramaedge/microshift-builder:${MICROSHIFT_VERSION}"
          echo "microshift_image=${MICROSHIFT_IMAGE}" >> $GITHUB_OUTPUT
          echo "build_mode=optimized" >> $GITHUB_OUTPUT
          
          echo "## 🚀 MicroShift Build with Pre-built Binaries" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Mode**: Using pre-built MicroShift binaries from microshift-builder repository" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**MicroShift Version**: $MICROSHIFT_VERSION" >> $GITHUB_STEP_SUMMARY
          echo "**MicroShift Image**: \`$MICROSHIFT_IMAGE\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🚀 Benefits" >> $GITHUB_STEP_SUMMARY
          echo "- **Fast Builds**: 5-8 minutes using pre-built binaries" >> $GITHUB_STEP_SUMMARY
          echo "- **Consistent**: Same binaries across environments" >> $GITHUB_STEP_SUMMARY
          echo "- **Repository**: [microshift-builder](https://github.com/RamaEdge/microshift-builder)" >> $GITHUB_STEP_SUMMARY

  build-and-scan:
    name: Build and Scan MicroShift OS Image
    runs-on: ubuntu-22.04
    needs: [calculate-version, determine-microshift-version]
    outputs:
      image-ref: ${{ steps.build.outputs.image-ref }}
      sbom-file: ${{ steps.build.outputs.sbom-file }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Build MicroShift Container Image
        id: build
        uses: ./.github/actions/build-container
        with:
          image-name: ${{ env.IMAGE_NAME }}
          image-tag: ${{ needs.calculate-version.outputs.version }}
          containerfile: Containerfile.fedora.optimized
          working-path: ./os
          registry: ${{ env.REGISTRY }}
          repository-owner: ${{ env.REPO_OWNER }}
          microshift-version: ${{ needs.determine-microshift-version.outputs.microshift-version }}

      - name: Security Scan Container Image
        uses: ./.github/actions/security-scan
        with:
          image-ref: ${{ steps.build.outputs.image-ref }}
          severity: 'CRITICAL,HIGH'
          build-mode: ${{ needs.determine-microshift-version.outputs.build-mode }}
          sha: ${{ needs.calculate-version.outputs.sha }}

      - name: Test MicroShift Container Image
        run: |
          echo "🧪 Testing MicroShift container image..."
          IMAGE_REF="${{ steps.build.outputs.image-ref }}"
          
          # Test basic functionality
          podman run --rm "$IMAGE_REF" /bin/bash -c "bootc status || true"
          podman run --rm "$IMAGE_REF" /bin/bash -c "systemctl --version"
          podman run --rm "$IMAGE_REF" /bin/bash -c "microshift version || echo 'MicroShift binary found'"
          podman run --rm "$IMAGE_REF" /bin/bash -c "ls -la /etc/microshift/manifests/observability-stack.yaml"
          
          # Test for Kubernetes components
          podman run --rm "$IMAGE_REF" /bin/bash -c "kubectl version --client || echo 'kubectl binary found'"
          
          echo "✅ All MicroShift tests passed!"
          
          echo "## 🧪 MicroShift Container Testing Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Image**: \`$IMAGE_REF\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Tests Passed**:" >> $GITHUB_STEP_SUMMARY
          echo "- **MicroShift binary**: Present" >> $GITHUB_STEP_SUMMARY
          echo "- **MicroShift manifests**: Available" >> $GITHUB_STEP_SUMMARY
          echo "- **Kubernetes client**: Ready" >> $GITHUB_STEP_SUMMARY

  build-iso:
    name: Build MicroShift ISO Image
    runs-on: ubuntu-22.04
    needs: [calculate-version, build-and-scan]
    if: github.event.inputs.build_iso == 'true'
    strategy:
      matrix:
        config:
          - ${{ github.event.inputs.iso_config || 'user' }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Build ISO with bootc-image-builder
        run: |
          echo "Building MicroShift ISO with ${{ matrix.config }} configuration..."
          
          IMAGE_REF="${{ needs.build-and-scan.outputs.image-ref }}"
          CONFIG_FILE="os/config-examples/${{ matrix.config }}-config.toml"
          
          if [ ! -f "$CONFIG_FILE" ]; then
            echo "❌ Configuration file not found: $CONFIG_FILE"
            exit 1
          fi
          
          mkdir -p iso-output
          
          podman pull quay.io/centos-bootc/bootc-image-builder:latest
          podman run --rm --privileged \
            --security-opt label=type:unconfined_t \
            -v $(PWD)/iso-output:/output \
            -v $(PWD)/$CONFIG_FILE:/config.toml:ro \
            quay.io/centos-bootc/bootc-image-builder:latest \
            --type iso \
            --config /config.toml \
            "$IMAGE_REF"

      - name: Upload ISO Artifact
        uses: actions/upload-artifact@v4
        with:
          name: microshift-edge-os-iso-${{ matrix.config }}-v${{ needs.calculate-version.outputs.version }}
          path: iso-output/
          retention-days: 30

      - name: ISO Build Summary
        run: |
          echo "## 📀 MicroShift ISO Build Summary - ${{ matrix.config }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Configuration**: ${{ matrix.config }}" >> $GITHUB_STEP_SUMMARY
          echo "**Version**: v${{ needs.calculate-version.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "**Base Image**: ${{ needs.build-and-scan.outputs.image-ref }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          if [ -f "iso-output/anaconda-iso/install.iso" ]; then
            ISO_SIZE=$(du -h "iso-output/anaconda-iso/install.iso" | cut -f1)
            echo "**ISO Size**: $ISO_SIZE" >> $GITHUB_STEP_SUMMARY
            echo "**ISO Location**: iso-output/anaconda-iso/install.iso" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Artifact Name**: microshift-edge-os-iso-${{ matrix.config }}-v${{ needs.calculate-version.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Kubernetes Distribution**: MicroShift (OpenShift Edge)" >> $GITHUB_STEP_SUMMARY 