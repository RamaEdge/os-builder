

# Shell Script Standards

## Script Headers
Always include comprehensive headers:
```bash
#!/bin/bash
# Script name and purpose
# 
# Usage: ./script.sh [options]
# Example: IMAGE_NAME=test ./build.sh

set -euo pipefail  # Strict error handling
```

## Variable Management
```bash
# Configuration with defaults and environment override
IMAGE_NAME="${IMAGE_NAME:-localhost/fedora-edge-os}"
IMAGE_TAG="${IMAGE_TAG:-latest}"

# Load versions from centralized file
K3S_VERSION="${K3S_VERSION:-$(grep '^K3S_VERSION=' versions.txt | cut -d'=' -f2)}"
```

## Error Handling & Logging
```bash
# Colors for output
GREEN='\033[0;32m'
RED='\033[0;31m'
YELLOW='\033[1;33m'
NC='\033[0m'

info() { echo -e "${GREEN}[INFO]${NC} $*"; }
warn() { echo -e "${YELLOW}[WARN]${NC} $*"; }
error() { echo -e "${RED}[ERROR]${NC} $*" >&2; }

# Function with error handling
check_container_runtime() {
    local runtime
    runtime=$(command -v podman 2>/dev/null || command -v docker 2>/dev/null || echo "")
    if [ -z "$runtime" ]; then
        error "No container runtime found. Install podman or docker."
        exit 1
    fi
    info "Using container runtime: $(basename "$runtime")"
}
```

## Platform Detection
```bash
# Detect OS and architecture for cross-platform compatibility
detect_platform() {
    local uname_s uname_m
    uname_s=$(uname -s)
    uname_m=$(uname -m)
    
    case "$uname_s" in
        Darwin) PLATFORM="macos" ;;
        Linux) PLATFORM="linux" ;;
        *) error "Unsupported OS: $uname_s" && exit 1 ;;
    esac
    
    case "$uname_m" in
        x86_64|amd64) ARCH="amd64" ;;
        aarch64|arm64) ARCH="arm64" ;;
        *) error "Unsupported architecture: $uname_m" && exit 1 ;;
    esac
}
```

## Script Quality Standards
- Always use `set -euo pipefail` in bash scripts
- Provide meaningful error messages with context
- Include suggestions for fixing common issues
- Use exit codes consistently (0=success, 1=error, 2=usage error)
- Use consistent log prefixes: `[INFO]`, `[WARN]`, `[ERROR]`
- Include timestamps for long-running operations
- Use colors for better readability
- Log important variable values during debugging

## Function Documentation
```bash
# Function documentation
# Purpose: Build container image with version metadata
# Inputs: IMAGE_NAME, IMAGE_TAG, optional BUILD_ARGS
# Outputs: Tagged container image
# Examples: 
#   build_image "myapp" "v1.0.0"
#   BUILD_ARGS="--build-arg VERSION=1.0" build_image "myapp" "latest"
build_image() {
    local image_name="$1"
    local image_tag="$2"
    # Implementation...
}
```

## Script Testing
```bash
# Include basic validation in scripts
validate_inputs() {
    [[ -n "${IMAGE_NAME:-}" ]] || { error "IMAGE_NAME is required"; exit 1; }
    [[ -n "${K3S_VERSION:-}" ]] || { error "K3S_VERSION is required"; exit 1; }
}

# Test container runtime availability
check_runtime() {
    if ! command -v "$CONTAINER_RUNTIME" >/dev/null 2>&1; then
        error "Container runtime '$CONTAINER_RUNTIME' not found"
        exit 1
    fi
}
```
---
description: Shell script standards and best practices for build scripts
globs: ["*.sh", "os/scripts/**", "scripts/**"]
---
